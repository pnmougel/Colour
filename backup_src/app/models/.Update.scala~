package models
import scala.collection.mutable.ListBuffer
import anorm._
import anorm.SqlParser._
import play.api.db._
import play.api.Play.current
import java.util.Date

case class Update(id: Long, conference: Long, user: Long, date: Date)

object Update {

    val single = {
        get[Long]("id") ~ get[Long]("conference_id") ~ get[Long]("user_id") ~ get[Date]("date") map {
            case id ~ conferenceId ~ userId ~ date => {
                Update(id, conferenceId, userId, date)
            }
        }
    }
    
    def create(conferenceId : Long, userId : Long, date : Date) : Long = {
        DB.withConnection { implicit c =>
            SQL("INSERT INTO Update (conference_id, user_id, date) " +
                    "values ({conferenceId}, {userId}, {date})").on(
                'conferenceId -> conferenceId,
                'userId -> userId,
                'date -> date).executeInsert().get
        }
    }
    
    def delete(id : Long) = { DB.withConnection { implicit c =>
            SQL("DELETE FROM Update WHERE id = {id}").on(
                'id -> id).executeUpdate()
        }
    }
    
    def getByConference(conferenceId : Long) : List[] = { DB.withConnection { implicit c =>
            SQL("SELECT * FROM Update WHERE conference_id = {conferenceId} ORDER BY date").on(
                'conferenceId -> conferenceId).as(Update.single *)
        }
    }
}